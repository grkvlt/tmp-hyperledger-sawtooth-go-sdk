package tests

import (
    "testing"
    . "sawtooth_sdk/client"
)

var data = []byte{0x01, 0x02, 0x03}
var privstr = "ad8523ac9f1e7a9fdaa42c25ca766b7b099c871e7c0705ae191e0bef22b5d8cb"

func TestSigning(t *testing.T) {
    priv := GenPrivKey()
    pub := GenPubKey(priv)
    sig := Sign(data, priv)
    if !Verify(data, sig, pub) {
        t.Error(
            "Couldn't verify generated signature",
            priv, pub, sig,
        )
    }
}

func TestEncoding(t *testing.T) {
    priv := MustDecode(privstr)
    if MustEncode(priv) != privstr {
        t.Error("Private key is different after encoding/decoding")
    }

    pubstr := MustEncode(GenPubKey(priv))
    if pubstr != "03d6d8ab906a0ad263628e9c81f01a73dc0361c51c90a1b583aece8103126bf40c" {
        t.Error("Public key doesn't match expected. Got", pubstr)
    }
    pub := MustDecode(pubstr)
    if len(pub) != 33 {
        t.Error("Encoded pubkey wrong length. Should be 33, but is", len(pub))
    }

    sigstr := MustEncode(Sign(data, priv))
    if sigstr != "ccecded22fb1153d2f45aaf6df8280d3296dd4677b1f711d6a89fc1e81393dda5287d81569a6c91b90389c562e60169d036f1f6a66241156c69e364434bcd654" {
        t.Error("Signature doesn't match expected. Got", sigstr)
    }
}

func TestEncoder(t *testing.T) {
    priv := MustDecode(privstr)

    encoder := NewEncoder(priv, TransactionParams{
        FamilyName: "abc",
        FamilyVersion: "123",
        PayloadEncoding: "myencoding",
        Inputs: []string{"def"},
    })

    txn1 := encoder.NewTransaction(data, TransactionParams{
        Nonce: "123",
        Outputs: []string{"def"},
    })

    pubstr := MustEncode(GenPubKey(priv))
    txn2 := encoder.NewTransaction(data, TransactionParams{
        Nonce: "456",
        Outputs: []string{"ghi"},
        BatcherPubkey: pubstr,
    })

    // Test serialization
    txns, err := ParseTransactions(SerializeTransactions([]*Transaction{txn1, txn2}))
    if err != nil {
        t.Error(err)
    }

    batch := encoder.NewBatch(txns)

    // Test serialization
    batches, err := ParseBatches(SerializeBatches([]*Batch{batch}))
    if err != nil {
        t.Error(err)
    }
    data := SerializeBatches(batches)
    datastr := MustEncode(data)

    expected := "0acc0a0aca020aabb030ab0020a423033643664386162393036613061643236333632386539633831663031613733646330333631633531633930613162353833616563653831303331323662663430631a0361626322033132332a0364656632033132333a03646566420a6d79656e636f64696e674aa030102031abb030ab0020a423033643664386162393036613061643236333632386539633831663031613733646330333631633531633930613162353833616563653831303331323662663430631a0361626322033132332a0364656632033435363a03676869420a6d79656e636f64696e674aa03010203"

    if datastr != expected {
        t.Error("Did not correctly encode batch. Got", datastr)
    }
}
